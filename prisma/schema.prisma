datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

model Course {
  id String @id @default(uuid())
  userId String
  title String @db.Text
  description String? @db.Text
  imageUrl String? @db.Text
  price Float?
  isPublished Boolean @default(false)

  categoryId String?
  category Category? @relation(fields: [categoryId], references: [id])

  chapters Chapter[]
  attachments Attachment[]
  purchases Purchase[]
  certificates Certificate[]
  discussions Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@index([price])
  @@index([createdAt])
  @@fulltext([title])
}

model Category {
  id String @id @default(uuid())
  name String @unique
  courses Course[]
}

model Attachment {
  id String @id @default(uuid())
  name String
  url String @db.Text

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id String @id @default(uuid())
  title String
  description String? @db.Text
  videoUrl String? @db.Text
  position Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)

  muxData MuxData?

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]
  comments Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData {
  id String @id @default(uuid())
  assetId String
  playbackId String?

  chapterId String @unique
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id String @id @default(uuid())
  userId String

  chapterId String
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
  @@index([userId])
  @@index([isCompleted])
  @@unique([userId, chapterId])
}

model Purchase {
  id String @id @default(uuid())
  userId String

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([userId])
  @@index([courseId])
  @@index([createdAt])
  @@unique([userId, courseId])
}

model StripeCustomer {
  id String @id @default(uuid())
  userId String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Certificate {
  id String @id @default(uuid())
  userId String
  certificateId String @unique @default(uuid())
  
  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@index([courseId])
  @@unique([userId, courseId])
}

model User {
  id        String   @id
  name      String?
  email     String?  @unique
  imageUrl  String?
  comments  Comment[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(uuid())
  text      String   @db.Text
  userId    String
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  chapterId String?
  chapter   Chapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  parentId  String?   // For threaded replies
  parent    Comment?  @relation("Replies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("Replies")

  // Moderation field as JSON
  moderation Json?    // Stores isReported, reportReason, reportedAt, reportedBy
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
  @@index([courseId])
  @@index([userId])
  @@index([parentId])
}

// Models for gamification system
model UserProfile {
  userId    String @id // Clerk User ID
  points    Int    @default(0)
  totalPointsEarned Int @default(0) // Track total points earned over time (doesn't decrease when points are spent)
  // level     Int    @default(1) // Optional
  
  // Admin flag
  isAdmin   Boolean @default(false)

  // Optional: If syncing Clerk data
  username  String?
  imageUrl  String?
  email     String?

  earnedBadges UserBadge[]

  // For leaderboard
  leaderboardEntries LeaderboardEntry[]
  
  // Streak tracking
  currentStreak     Int       @default(0)
  longestStreak     Int       @default(0)
  lastLoginDate     DateTime?
  
  // Featured badges as JSON
  featuredBadges String? @db.Text // Stored as JSON string: ["badgeId1", "badgeId2"]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Model to track point activity
model PointActivity {
  id            String   @id @default(uuid())
  userId        String
  points        Int
  reason        String
  activityType  String
  idempotencyKey String? @unique
  createdAt     DateTime

  @@index([userId])
  @@index([createdAt])
}

model Badge {
  id          String @id @default(uuid())
  name        String @unique
  description String
  iconUrl     String // URL to the badge icon
  criteria    String // Description of how to earn it (for display)
  tier        String      @default("bronze") // "bronze", "silver", "gold"

  users UserBadge[]

  createdAt DateTime @default(now())
}

model UserBadge {
  id        String   @id @default(uuid())
  userId    String
  user      UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)
  badgeId   String
  badge     Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  // Customization fields
  isFavorite    Boolean   @default(false)
  displayColor  String?   // Optional custom color

  earnedAt DateTime @default(now())

  @@unique([userId, badgeId]) // User can earn each badge only once
  @@index([userId])
  @@index([badgeId])
}

// Add to track leaderboard entries
model LeaderboardEntry {
  id            String      @id @default(uuid())
  userId        String
  user          UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)
  points        Int
  period        String      // "weekly", "monthly", "all-time"
  weekNumber    Int?        // ISO week number (1-53)
  monthNumber   Int?        // Month number (1-12)
  year          Int         // Year
  rank          Int?        // Optional stored rank
  
  createdAt     DateTime    @default(now())

  @@unique([userId, period, weekNumber, monthNumber, year])
  @@index([period, year, weekNumber])
  @@index([period, year, monthNumber])
  @@index([userId])
}

// Push notification subscription model for web push notifications
model PushSubscription {
  id             String    @id @default(uuid())
  userId         String
  endpoint       String    @unique
  expirationTime String?
  keys           Json      // p256dh and auth keys for the subscription
  userAgent      String?   // Browser/device information
  
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([userId])
}