"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/client.ts
var client_exports = {};
__export(client_exports, {
  DANGEROUS__uploadFiles: () => DANGEROUS__uploadFiles,
  classNames: () => classNames,
  genUploader: () => genUploader,
  generateClientDropzoneAccept: () => generateClientDropzoneAccept,
  generateMimeTypes: () => generateMimeTypes
});
module.exports = __toCommonJS(client_exports);
var import_shared = require("@uploadthing/shared");

// src/internal/s3-error-parser.ts
var maybeParseResponseXML = (maybeXml) => {
  const codeMatch = maybeXml.match(/<Code>(.*?)<\/Code>/s);
  const messageMatch = maybeXml.match(/<Message>(.*?)<\/Message>/s);
  const code = codeMatch == null ? void 0 : codeMatch[1];
  const message = messageMatch == null ? void 0 : messageMatch[1];
  if (!code || !message)
    return null;
  return { code: s3CodeToUploadThingCode[code] ?? DEFAULT_ERROR_CODE, message };
};
var DEFAULT_ERROR_CODE = "UPLOAD_FAILED";
var s3CodeToUploadThingCode = {
  AccessDenied: "FORBIDDEN",
  // 403 Forbidden
  EntityTooSmall: "TOO_SMALL",
  // 400 Bad Request
  EntityTooLarge: "TOO_LARGE",
  // 400 Bad Request
  ExpiredToken: "FORBIDDEN",
  // 400 Bad Request
  IncorrectNumberOfFilesInPostRequest: "TOO_MANY_FILES",
  // 400 Bad Request
  InternalError: "INTERNAL_SERVER_ERROR",
  // 500 Internal Server Error
  KeyTooLongError: "KEY_TOO_LONG",
  // 400 Bad Request
  MaxMessageLengthExceeded: "TOO_LARGE"
  // 400 Bad Request
};

// src/client.ts
function fetchWithProgress(url, opts = {}, onProgress, onUploadBegin) {
  return new Promise((res, rej) => {
    const xhr = new XMLHttpRequest();
    xhr.open(opts.method ?? "get", url);
    opts.headers && Object.keys(opts.headers).forEach(
      (h) => opts.headers && xhr.setRequestHeader(h, opts.headers.get(h) ?? "")
    );
    xhr.onload = (e) => {
      res(e.target);
    };
    xhr.onerror = rej;
    if (xhr.upload && onProgress)
      xhr.upload.onprogress = onProgress;
    if (xhr.upload && onUploadBegin)
      xhr.upload.onloadstart = onUploadBegin;
    xhr.send(opts.body);
  });
}
var createAPIRequestUrl = (config) => {
  const url = new URL(
    config.url ?? `${window.location.origin}/api/uploadthing`
  );
  const queryParams = new URLSearchParams(url.search);
  queryParams.set("actionType", config.actionType);
  queryParams.set("slug", config.slug);
  url.search = queryParams.toString();
  return url.toString();
};
var DANGEROUS__uploadFiles = async (opts, config) => {
  const s3ConnectionRes = await fetch(
    createAPIRequestUrl({
      url: config == null ? void 0 : config.url,
      slug: String(opts.endpoint),
      actionType: "upload"
    }),
    {
      method: "POST",
      body: JSON.stringify({
        files: opts.files.map((f) => f.name),
        input: opts.input
      })
    }
  ).then(async (res) => {
    if (!res.ok) {
      const error = await import_shared.UploadThingError.fromResponse(res);
      throw error;
    }
    try {
      return res.json();
    } catch (e) {
      console.error(e);
      throw new import_shared.UploadThingError({
        code: "BAD_REQUEST",
        message: `Failed to parse response as JSON. Got: ${await res.text()}`,
        cause: e
      });
    }
  });
  if (!s3ConnectionRes || !Array.isArray(s3ConnectionRes)) {
    throw new import_shared.UploadThingError({
      code: "BAD_REQUEST",
      message: "No URL. How did you even get here?",
      cause: s3ConnectionRes
    });
  }
  const fileUploadPromises = s3ConnectionRes.map(async (presigned) => {
    const file = opts.files.find((f) => f.name === presigned.name);
    if (!file) {
      console.error("No file found for presigned URL", presigned);
      throw new import_shared.UploadThingError({
        code: "NOT_FOUND",
        message: "No file found for presigned URL",
        cause: `Expected file with name ${presigned.name} but got '${opts.files.join(",")}'`
      });
    }
    const { url, fields } = presigned.presignedUrl;
    const formData = new FormData();
    if (presigned.fileType === file.type.split("/")[0] || presigned.fileType === file.type) {
      formData.append("Content-Type", file.type);
    } else if (presigned.fileType === "blob") {
      formData.append("Content-Type", "application/octet-stream");
    } else if (presigned.fileType === "pdf") {
      formData.append("Content-Type", "application/pdf");
    }
    Object.entries({ ...fields, file }).forEach(([key, value]) => {
      formData.append(key, value);
    });
    const upload = await fetchWithProgress(
      url,
      {
        method: "POST",
        body: formData,
        headers: new Headers({
          Accept: "application/xml"
        })
      },
      (progressEvent) => opts.onUploadProgress && opts.onUploadProgress({
        file: file.name,
        progress: progressEvent.loaded / progressEvent.total * 100
      }),
      () => {
        opts.onUploadBegin && opts.onUploadBegin({
          file: file.name
        });
      }
    );
    if (upload.status > 299 || upload.status < 200) {
      await fetch(
        createAPIRequestUrl({
          url: config == null ? void 0 : config.url,
          slug: String(opts.endpoint),
          actionType: "failure"
        }),
        {
          method: "POST",
          body: JSON.stringify({
            fileKey: fields.key
          })
        }
      );
      const parsed = maybeParseResponseXML(upload.responseText);
      if (parsed == null ? void 0 : parsed.message) {
        throw new import_shared.UploadThingError({
          code: parsed.code,
          message: parsed.message
        });
      } else {
        throw new import_shared.UploadThingError({
          code: "UPLOAD_FAILED",
          message: `Failed to upload file ${file.name} to S3`,
          cause: upload.responseText
        });
      }
    }
    const genUrl = "https://utfs.io/f/" + encodeURIComponent(fields.key);
    await (0, import_shared.pollForFileData)(presigned.key);
    const ret = {
      fileName: file.name,
      name: file.name,
      fileSize: file.size,
      size: file.size,
      fileKey: presigned.key,
      key: presigned.key,
      fileUrl: genUrl,
      url: genUrl
    };
    return ret;
  });
  return Promise.all(fileUploadPromises);
};
var genUploader = () => {
  return DANGEROUS__uploadFiles;
};
var classNames = (...classes) => {
  return classes.filter(Boolean).join(" ");
};
var generateMimeTypes = (fileTypes) => {
  const accepted = fileTypes.map((type) => {
    if (type === "blob")
      return "blob";
    if (type === "pdf")
      return "application/pdf";
    if (type.includes("/"))
      return type;
    else
      return `${type}/*`;
  });
  if (accepted.includes("blob")) {
    return void 0;
  }
  return accepted;
};
var generateClientDropzoneAccept = (fileTypes) => {
  const mimeTypes = generateMimeTypes(fileTypes);
  if (!mimeTypes)
    return void 0;
  return Object.fromEntries(mimeTypes.map((type) => [type, []]));
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DANGEROUS__uploadFiles,
  classNames,
  genUploader,
  generateClientDropzoneAccept,
  generateMimeTypes
});
//# sourceMappingURL=client.js.map